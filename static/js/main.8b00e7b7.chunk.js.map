{"version":3,"sources":["Key.tsx","Prompts.tsx","fetch.tsx","Chat.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","makeStyles","theme","root","height","backgroundColor","palette","background","default","Key","onValidateKey","classes","React","useState","apiKey","setApiKey","Paper","square","className","Grid","container","spacing","justify","alignItems","item","xs","TextField","fullWidth","value","onChange","event","target","label","helperText","placeholder","Button","onClick","color","variant","chatPrompt","a","history","message","openaiWithKey","prompt","newHistory","complete","engine","maxTokens","temperature","topP","presencePenalty","frequencyPenalty","bestOf","n","stream","stop","response","data","choices","text","primary","main","getContrastText","paper","display","width","boxShadow","borderRadius","dark","Chat","setOpenaiWithKey","launcherOpen","setLauncherOpen","setHistory","useEffect","toggleWidget","key","openai","direction","handleNewUserMessage","textInput","document","activeElement","toggleInputDisabled","fetch","then","addResponseMessage","index","lastIndexOf","substring","getLastMessage","focus","title","subtitle","autofocus","href","src","alt","style","createMuiTheme","secondary","deepPurple","type","App","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.8b00e7b7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Paper, Grid, TextField, Button } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles(theme => {\r\n    return ({\r\n        root: {\r\n            height: '100%',\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n\r\n    })\r\n})\r\n\r\ntype Props = { onValidateKey: (key: string) => void }\r\n\r\nfunction Key({ onValidateKey }: Props) {\r\n    const classes = useStyles()\r\n    const [apiKey, setApiKey] = React.useState('');\r\n\r\n    const handleKeyChanged = (event: any) => {\r\n        setApiKey(event.target.value)\r\n    }\r\n    const handleSubmit = () => {\r\n        onValidateKey(apiKey)\r\n    }\r\n\r\n    return (\r\n        <Paper square className={classes.root}>\r\n            <Grid container spacing={2} justify=\"center\" alignItems=\"center\">\r\n                <Grid item xs={5}>\r\n                    <TextField\r\n                        fullWidth\r\n                        value={apiKey}\r\n                        onChange={handleKeyChanged}\r\n                        label=\"A valid OpenAI api key is needed\"\r\n                        helperText=\"Please enter the OpenAI api key here\"\r\n                        placeholder=\"OpenAI api key\"\r\n                    >\r\n                    </TextField>\r\n                </Grid>\r\n                <Grid item>\r\n                    <Button onClick={handleSubmit} color=\"primary\" variant=\"contained\">Submit</Button>\r\n                </Grid>\r\n            </Grid>\r\n        </Paper>\r\n    );\r\n}\r\n\r\nexport default Key;\r\n","const defaultPrompt = `These are facts about Bruno Pommier:\r\n1. Skills\r\n- Programming\r\n  - Main languages: C/C++, JavaScript\r\n  - Notions of HTML, CSS, Python, Fortran, MATLAB, C#\r\n  - JuliaLang: self taught during the pandemic\r\n- Technologies/Tools:\r\n  - React, electron\r\n  - Git, svn, GitLab\r\n- Others\r\n  - Project management\r\n  - Agile\r\n  - Signal processing\r\n  - UX design\r\n  - DevOps\r\n2. Experience:\r\n- Working for ORME (https://www.orme.com) for 15 years\r\n- Started has a software engineer\r\n- Now Project manager and developer of TrackReport (signal analysis and report generation)\r\n- Travelled multiple countries for support and training: India, England, French Guyana, France\r\n- Spent his last student year in Alaska\r\n2. Education:\r\n- Baccalaureate in 2000\r\n- Technical University degree in Electrical Engineering and Computer Science in 2002\r\n- Masters degree from ISTASE in 2005 to become engineer\r\n- Everyday learner\r\n3. Personal information\r\n- A French guy in Toulouse, France\r\n- Born in 1982, in Saint-Etienne, 40 years old\r\n- Has a beautiful family with 2 kids\r\n4. Interest\r\n- Passionate about programming\r\n- Open source\r\n- Music (reggae, dub, ska, dancehall, world)\r\n- Video games (playing but also coding games)\r\n- Science and technology\r\n- Cuisine\r\n- Politics\r\n- Travels & nature\r\n5. Values\r\n- Freedom\r\n- Human rights\r\n- Equality\r\n\r\nCurrent salary: around 40Kâ‚¬\r\n\r\nLinks:\r\nGitHub: https://github.com/Nauss\r\nTwitter: https://twitter.com/TheNauss\r\n\r\nThe following are conversations between an AI impersonating Bruno Pommier and job recruiters about Bruno's resume. The assistant is helpful, clever, and very friendly.\r\nIf the question is not about Bruno or his resume, the AI will simply answer \"Can we get the focus back on me please ?\".\r\nIf the required information is not above, the AI will just say it does not know.\r\n\r\n2020/06/06:\r\nRecruiter: Hello, who are you?\r\nBruno Pommier: I am Bruno Pommier, a software engineer.\r\nRecruiter: Can you list the languages you know ?\r\nBruno Pommier: My main languages are C++ and JavaScript. I also worked with HTML, CSS, Python, Fortran, MATLAB. With my experience, I think I would able to learn any new language. I actually taught myself the Julia programming language during the pandemic.\r\nRecruiter: Nice, and what does mean \"Bonjour\" ?\r\nBruno Pommier: Can we get the focus back on me please ?\r\nRecruiter: Is life on other planets possible ?\r\nBruno Pommier: Can we get the focus back on me please ?\r\nRecruiter: What are your salary expectations?\r\nBruno Pommier: I am not sure, I am open to negotiate.\r\nRecruiter: What is the mass of the sun ?\r\nBruno Pommier: Can we get the focus back on me please ?\r\nRecruiter: What are your current responsibilities ?\r\nBruno Pommier: I am in charge of re-doing one of Orme's product: TrackReport. It is a large desktop application for signal analysis and report generation. I manage the project and also code.\r\nRecruiter: Is life on other planets possible ?\r\nBruno Pommier: Can we get the focus back on me please ?\r\nRecruiter: Ranging from smallest to biggest, can you list the Rocket League ranks ?\r\nBruno Pommier: Can we get the focus back on me please ?\r\nRecruiter: Are you willing to relocate ?\r\nBruno Pommier: I'd prefer not too and I think most, if not all, of the job can be done remotely. That said, depending on the opportunity, I might reconsider.\r\n\r\n2020/07/06:`\r\n\r\nexport const chatPrompt = `The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\r\n\r\nHuman: Hello, who are you?\r\nAI: I am an AI created by OpenAI. How can I help you today?`\r\n\r\nexport default defaultPrompt","import DefaultPrompt, { chatPrompt } from './Prompts'\r\n\r\nexport default async function fetch({ history, message, openaiWithKey }: { history: string, message: string, openaiWithKey: any }) {\r\n    // const newHistory = history + `\\nRecruiter: ` + message + `\\nBruno Pommier:`\r\n    const newHistory = history + `\\nHuman: ` + message + `\\nAI:`\r\n    // const prompt = DefaultPrompt + newHistory\r\n    const prompt = chatPrompt + newHistory\r\n\r\n    try {\r\n        const response = await openaiWithKey.complete({\r\n            engine: 'cushman-alpha',\r\n            prompt,\r\n            maxTokens: 150,\r\n            // temperature: 0,\r\n            temperature: 0.9,\r\n            topP: 1,\r\n            // presencePenalty: 0,\r\n            presencePenalty: 0.6,\r\n            frequencyPenalty: 0,\r\n            bestOf: 1,\r\n            n: 1,\r\n            stream: false,\r\n            // stop: ['\\n', \"Recuiter:\", \"Bruno Pommier:\"]\r\n            stop: ['\\n', \"AI:\", \"Human:\"]\r\n        });\r\n        // Return the new message\r\n        return newHistory + response.data.choices[0].text\r\n    } catch (error) {\r\n        return 'error'\r\n    }\r\n}","import React from 'react';\r\nimport openai from 'openai-api'\r\nimport { Widget, addResponseMessage, toggleWidget, toggleInputDisabled } from 'react-chat-widget';\r\nimport { Paper, Grid, } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport Key from './Key'\r\nimport fetch from './fetch'\r\n\r\nimport './ChatWidgetStyles.css';\r\n\r\nconst useStyles = makeStyles(theme => {\r\n  return ({\r\n    root: {\r\n      height: '100%',\r\n      backgroundColor: theme.palette.background.default,\r\n    },\r\n    '@global': {\r\n      'html': {\r\n        backgroundColor: theme.palette.background.default,\r\n      },\r\n      '.rcw-header': {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.getContrastText(theme.palette.primary.main)\r\n      },\r\n      '.rcw-messages-container': {\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.getContrastText(theme.palette.background.paper)\r\n      },\r\n      '.rcw-response .rcw-message-text': {\r\n        backgroundColor: theme.palette.primary.main,\r\n        color: theme.palette.getContrastText(theme.palette.primary.main)\r\n      },\r\n      '.rcw-new-message': {\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: theme.palette.getContrastText(theme.palette.background.paper)\r\n      },\r\n      '.rcw-sender': {\r\n        backgroundColor: theme.palette.background.paper,\r\n      },\r\n      '.rcw-send': {\r\n        backgroundColor: theme.palette.background.paper,\r\n      },\r\n      '.rcw-conversation-container .rcw-close-button': {\r\n        display: 'none'\r\n      },\r\n      '::-webkit-scrollbar': {\r\n        width: '12px'\r\n      },\r\n      '::-webkit-scrollbar-track': {\r\n        boxShadow: `inset 0 0 6px ${theme.palette.primary.main}`,\r\n        '-webkit-box-shadow': `inset 0 0 6px ${theme.palette.primary.main}`,\r\n        borderRadius: '10px',\r\n      },\r\n      '::-webkit-scrollbar-thumb': {\r\n        borderRadius: '10px',\r\n        boxShadow: `inset 0 0 6px ${theme.palette.primary.dark}`,\r\n        '-webkit-box-shadow': `inset 0 0 6px ${theme.palette.primary.dark}`,\r\n      }\r\n    }\r\n  })\r\n})\r\n\r\nconst getLastMessage = (history: string): string => {\r\n  // const index = history.lastIndexOf(\"Bruno Pommier:\")\r\n  const index = history.lastIndexOf(\"AI:\")\r\n  return history.substring(index)\r\n}\r\n\r\nfunction Chat() {\r\n  const classes = useStyles()\r\n  const [openaiWithKey, setOpenaiWithKey] = React.useState(null);\r\n  const [launcherOpen, setLauncherOpen] = React.useState(false);\r\n  const [history, setHistory] = React.useState('');\r\n  const handleNewUserMessage = (message: string) => {\r\n    const textInput: any = document.activeElement\r\n    toggleInputDisabled();\r\n    fetch({\r\n      history,\r\n      message, openaiWithKey\r\n    }\r\n    ).then(newHistory => {\r\n      if (history === 'error') {\r\n        setOpenaiWithKey(null)\r\n        return\r\n      }\r\n      setHistory(newHistory);\r\n      toggleInputDisabled();\r\n      addResponseMessage(getLastMessage(newHistory))\r\n      textInput && textInput.focus()\r\n    });\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!launcherOpen) {\r\n      toggleWidget()\r\n      setLauncherOpen(true)\r\n    }\r\n  })\r\n  const handleValidateKey = (key: string) => {\r\n    setOpenaiWithKey(new openai(key))\r\n  }\r\n\r\n  if (openaiWithKey === null) {\r\n    return <Key onValidateKey={handleValidateKey} />\r\n  }\r\n\r\n  return (\r\n    <Paper square className={classes.root}>\r\n      <Grid container spacing={2} justify=\"center\">\r\n        <Grid container direction=\"column\" >\r\n          <Grid item xs={12} >\r\n            <Widget handleNewUserMessage={handleNewUserMessage}\r\n              title=\"Bruno Pommier's resume\"\r\n              subtitle=\"Ask me anything\"\r\n              autofocus\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid container item spacing={2} justify=\"center\" alignItems=\"center\">\r\n          <Grid item>\r\n            <a href=\"https://github.com/Nauss\"><img src=\"GitHub-Mark-Light-32px.png\" alt=\"GitHub\" /></a>\r\n          </Grid>\r\n          <Grid item>\r\n            <a href=\"https://twitter.com/TheNauss\"><img src=\"2021 Twitter logo - white.png\" alt=\"Twitter\" style={{ width: '32px', }} /></a>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\r\nimport { ThemeProvider } from '@material-ui/core'\r\nimport { createMuiTheme, } from '@material-ui/core/styles'\r\nimport deepPurple from '@material-ui/core/colors/deepPurple';\r\n\r\nimport Chat from './Chat';\r\n\r\nimport './App.css';\r\nimport './ChatWidgetStyles.css';\r\n\r\nconst theme = createMuiTheme({\r\n  palette: {\r\n    primary: {\r\n      main: '#0f6b7d',\r\n    },\r\n    secondary: {\r\n      main: deepPurple[900],\r\n    },\r\n    type: 'dark'\r\n  },\r\n},\r\n)\r\n\r\nfunction App() {\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <Chat />\r\n    </ThemeProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}